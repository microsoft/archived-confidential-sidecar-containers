// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

package attest

import (
	"bytes"
	_ "embed"
	"testing"

	"encoding/hex"

	"github.com/pkg/errors"
)

func Test_SNP(t *testing.T) {

	TestSNPReport := SNPAttestationReport{
		Version:          1,
		GuestSvn:         1,
		Policy:           196639,
		FamilyID:         "01000000000000000000000000000000",
		ImageID:          "02000000000000000000000000000000",
		VMPL:             0,
		SignatureAlgo:    1,
		PlatformVersion:  3530822107858468864,
		PlatformInfo:     1,
		AuthorKeyEn:      0,
		Reserved1:        0,
		ReportData:       "7ab000a323b3c873f5b81bbe584e7c1a26bcf40dc27e00f8e0d144b1ed2d14f10000000000000000000000000000000000000000000000000000000000000000",
		Measurement:      "b579c7d6b89f3914659abe09a004a58a1e77846b65bbdac9e29bd8f2f31b31af445a5dd40f76f71ecdd73117f1d592a3",
		HostData:         "8c19f1b6eee8658fbf8ff1b37f603c38929896b1cc813583bbfb21015b7aa66d",
		IDKeyDigest:      "d188ac79386022aec7aa4e72a7e87b0a8e0e8009183334bb0fe4f97ed89436f360b3644cd8382c7a14531a87b81a8f36",
		AuthorKeyDigest:  "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		ReportID:         "2e880add9a31077e5e8f3568b4c4451f0fea4372f66e3df3c0ca3ba26f447db2",
		ReportIDMA:       "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		ReportedTCB:      3530822107858468864,
		Reserved2:        "000000000000000000000000000000000000000000000000",
		ChipID:           "e6c86796cd44b0bc6b7c0d4fdab33e2807e14b5fc4538b3750921169d97bcf4447c7d3ab2a7c25f74c1641e2885c1011d025cc536f5c9a2504713136c7877f48",
		CommittedSvn:     0,
		CommittedVersion: 0,
		LaunchSvn:        0,
		Reserved3:        "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		Signature:        "247c7525e84623db9868fccf00faab22229d60aaa380213108f8875011a8f456231c5371277cc706733f4a483338fb59000000000000000000000000000000000000000000000000ed8c62254022f64630ebf97d66254dee04f708ecbe22387baf8018752fadc2b763f64bded65c94a325b6b9f22ebbb0d80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
	}

	TestSNPReportBytes, _ := hex.DecodeString("01000000010000001f00030000000000010000000000000000000000000000000200000000000000000000000000000000000000010000000000000000000031010000000000000000000000000000007ab000a323b3c873f5b81bbe584e7c1a26bcf40dc27e00f8e0d144b1ed2d14f10000000000000000000000000000000000000000000000000000000000000000b579c7d6b89f3914659abe09a004a58a1e77846b65bbdac9e29bd8f2f31b31af445a5dd40f76f71ecdd73117f1d592a38c19f1b6eee8658fbf8ff1b37f603c38929896b1cc813583bbfb21015b7aa66dd188ac79386022aec7aa4e72a7e87b0a8e0e8009183334bb0fe4f97ed89436f360b3644cd8382c7a14531a87b81a8f360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e880add9a31077e5e8f3568b4c4451f0fea4372f66e3df3c0ca3ba26f447db2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000031000000000000000000000000000000000000000000000000e6c86796cd44b0bc6b7c0d4fdab33e2807e14b5fc4538b3750921169d97bcf4447c7d3ab2a7c25f74c1641e2885c1011d025cc536f5c9a2504713136c7877f48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000247c7525e84623db9868fccf00faab22229d60aaa380213108f8875011a8f456231c5371277cc706733f4a483338fb59000000000000000000000000000000000000000000000000ed8c62254022f64630ebf97d66254dee04f708ecbe22387baf8018752fadc2b763f64bded65c94a325b6b9f22ebbb0d

	type testcase struct {
		name string

		SNPReport      *SNPAttestationReport
		SNPReportBytes []byte

		expectedContent interface{}
		expectedError   error
		expectErr       bool
	}

	testcases := []*testcase{
		// SerializeReport_Success passes the testing if the error returned is nil and the returned content matches the expected one
		{
			name: "SerializeReport_Success",

			SNPReport:      &TestSNPReport,
			SNPReportBytes: nil,

			expectedContent: TestSNPReportBytes,

			expectedError: nil,
			expectErr:     false,
		},
		// DeseerializeReport_Succes passes the testing if it does not receive error and the returned content matches the expected one
		{
			name: "DeserializeReport_Success",

			SNPReport:      nil,
			SNPReportBytes: TestSNPReportBytes,

			expectedContent: TestSNPReport,

			expectedError: nil,
			expectErr:     false,
		},
		// DeserializeReport_InvalidSize passes the testing if it receives the expected error
		{
			name: "DeserializeReport_InvalidSize",

			SNPReport:      nil,
			SNPReportBytes: make([]byte, 4),

			expectedError: errors.Errorf("invalid snp report size"),
			expectErr:     true,
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {

			if tc.SNPReportBytes == nil {
				// this is a Serialize Test
				mySNPReportBytes, err := tc.SNPReport.SerializeReport()

				if tc.expectErr {
					if err == nil {
						t.Fatal("expected err but got nil")
					} else if err.Error() != tc.expectedError.Error() {
						t.Fatalf("expected %q got %q", tc.expectedError.Error(), err.Error())
					}
				} else {
					if err != nil {
						t.Fatalf("did not expect err got %q", err.Error())
					} else if !bytes.Equal(tc.expectedContent.([]byte), mySNPReportBytes) {
						t.Fatalf("expected %q got %q", tc.expectedContent.([]byte), tc.SNPReportBytes)
					}
				}

			} else {
				// this is a Deserialize Test
				var mySNPReport SNPAttestationReport
				err := mySNPReport.DeserializeReport(tc.SNPReportBytes)

				if tc.expectErr {
					if err == nil {
						t.Fatal("expected err but got nil")
					} else if err.Error() != tc.expectedError.Error() {
						t.Fatalf("expected %q got %q", tc.expectedError.Error(), err.Error())
					}
				} else {
					if err != nil {
						t.Fatalf("did not expect err got %q", err.Error())
					} else if tc.expectedContent.(SNPAttestationReport) != mySNPReport {
						t.Fatalf("expected %v got %v", tc.expectedContent.(SNPAttestationReport), mySNPReport)
					}
				}
			}
		})
	}
}
